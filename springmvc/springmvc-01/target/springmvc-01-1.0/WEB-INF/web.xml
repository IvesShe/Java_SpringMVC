<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">

    <!--聲明、註冊springmvc的核心對象DispatcherServlet
        需要在tomcat服鍪器啟動後，創建DispatcherServlet對象的實例。
        因為DispatcherServlet在創建過程中，會同時創建springmvc容器對象，
        讀取springmvc的配置文件，把這個配置文件中的對象都創建好，
        當用戶發起請求時，就可以直接使用對象了。

        servlet的初始化會執行init()方法。DispatcherServlet在init()中{
            // 創建容器，讀取配置文件
            WebApplicationContext ctx = new ClassPathXmlApplicationContext("spring.xml");
            // 把容器對象放到ServletContext中
            getServletContext().setAttribute(key,ctx);
        }

        啟動tomcat報錯，讀取這個文件失敗 /WEB-INF/springmvc-servlet.xml
        springmvc創建容器對象時，讀取的配置文件默認是/WEB-INF/<servlet-name>-servlet.xml
    -->
    <servlet>
        <servlet-name>myweb</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <!--自定義springmvc讀取配置文件的位置-->
        <init-param>
            <!--springmvc配置文件的位置的屬性-->
            <param-name>contextConfigLocation</param-name>
            <!--指定自定義文件的位置-->
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
        
        <!--在tomcat啟動後，創建servlet對象
            load-on-startup：表示tomcat啟動後創建對象的順序。它的值是整數，數值愈小，
                         tomcat創建對象的時間愈早。大於等於0的整數。
        -->
        <load-on-startup>1</load-on-startup>
    </servlet>

    <servlet-mapping>
        <servlet-name>myweb</servlet-name>
        <!--
            使用框架的時候，url-pattern可以使用兩種值
            1. 使用擴展名方式，語法 *.xxx，xxxx是自定義的擴展名。常用的方式 *.do，*.action， *.mvc等等
               http://localhost:8080/myweb/some.do
               http://localhost:8080/myweb/other.do
            2. 使用斜杠 "/"
        -->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>

</web-app>